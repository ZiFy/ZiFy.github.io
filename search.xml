<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[12.自定义Carthage私库]]></title>
    <url>%2F2019%2F02%2F16%2F12-%E8%87%AA%E5%AE%9A%E4%B9%89Carthage%E7%A7%81%E5%BA%93%2F</url>
    <content type="text"><![CDATA[本文介绍如何创建一个自己的Carthage仓库与cocoapods不同的地方是, Carthage最后使用的是framework，所依赖的仓库根目录下面必须存在一个xcode framework工程。1.创建一个framework工程2.这个工程依赖的其他工程所以依赖的工程，必须直接或者间接的存在framework。直接依赖framework存在framework工程(包括：是一个Carthage私库)]]></content>
      <tags>
        <tag>Carthage</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[11.Carthage的使用及注意]]></title>
    <url>%2F2019%2F02%2F16%2F11.Carthage%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%B3%A8%E6%84%8F%2F</url>
    <content type="text"><![CDATA[###安装Carthage:推荐使用HomeBrew进行安装$ brew install carthage###使用Carthage1.先进入到项目.xcodeproj所在文件夹$ cd 项目路径2.创建一个空的Carthage文件$ touch Cartfile3.编辑cartfile文件，添加依赖框架123github &quot;Alamofire/AlamofireImage&quot;github &quot;https://github.com/AFNetworking/AFNetworking&quot;git &quot;xxx&quot;4.保存并关闭cartfile文件，进行安装$ carthage update --no-use-binaries --platform ios其他多个Xcode多个 Xcode 版本用 DEVELOPER_DIR 指定就行在编码时看第三方源码加 Carthage update –configuration Debug引用：Carthage官方使用教程Cartfile官方说明Carthage的用法及注意事项]]></content>
      <tags>
        <tag>Carthage</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[10.Cocoapods项目中使用Carthage]]></title>
    <url>%2F2019%2F02%2F16%2F10.Cocoapods%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8Carthage%2F</url>
    <content type="text"><![CDATA[本文介绍了在一个成功使用cocoapods项目中，引入Carthage1.使用Carthage引入一个只是主工程依赖的repo这是最简单的情况，按照Carthage的基本使用方式即可2.Carthage多层嵌套的依赖即repo1依赖repo2repo1下面的Cartfile中引用repo23.cocoapods依赖Carthage导入的库理论上不可行，cocoapods的spec里面会依赖库，会重复引用。4.Carthage依赖cocoapods导入的库理论上不可行，cocoapods的spec里面会依赖库，会重复引用。引用如何使用Carthage解决嵌套的库依赖]]></content>
  </entry>
  <entry>
    <title><![CDATA[9.Fastlane打包iOS常见问题]]></title>
    <url>%2F2019%2F01%2F25%2F9.Fastlane%E6%89%93%E5%8C%85iOS%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[1.打包在iOS工程根目录下有个fastlane文件夹，注意 Appfile、 Fastfile、MatchfileAppfile :App信息Fastfile :脚本命令Matchfile :Match配置2.常见问题-证书证书不存在操作步骤：fastlane match nuke ：移除失效证书fastlane match development ：注册证书3.常见问题-二次认证appleid开启二次认证后，需要每次都输入6位验证码通过配置FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORDFASTLANE_PASSWORDMATCH_PASSWORDFASTLANE_SESSIONsession失效fastlane spaceauth -u your@appid.com 重新生成4.常见问题-latest_testflight_build_number问题描述：问题原因分析:一个未发布的app，没有发一个ipa到appstoreconnect的时候，latest_testflight_build_number命令找不到一个版本，接口返回报错。解决方法：只要appstoreconnect上面有一个版本，就不会报错，解决方法很简单，第一次使用的时候，注销掉latest_testflight_build_number代码，使用配置好的buildnumber即可。]]></content>
  </entry>
  <entry>
    <title><![CDATA[8.工具资源网站整理]]></title>
    <url>%2F2018%2F12%2F19%2F8.%E5%B7%A5%E5%85%B7%E8%B5%84%E6%BA%90%E7%BD%91%E7%AB%99%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[工具资源网站整理论坛掘金 https://e.xitu.io/掘金小册 https://juejin.im/book/5ad19f07518825364001dd49/section/5ad19f076fb9a028c42ea1d5掘金 https://juejin.im/timeline网络服务语言开发辅助工具美工墨刀-原型工具 https://modao.cc/图标库 https://www.iconfont.cn]]></content>
  </entry>
  <entry>
    <title><![CDATA[7.HexoNext样式整理]]></title>
    <url>%2F2018%2F12%2F07%2F7.HexoNext%E6%A0%B7%E5%BC%8F%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[本文整理了使用的Hexo-Next主题的实用自定义样式。github bannerhttp://tholman.com/github-corners/选择你喜欢的样式，然后找到, /themes/next/layout/_third-party/github-banner.swig, 替换里面的svg就可以了。如果只是颜色修改，找到 /themes/next/_config.yml:android_chrome_color 直接改就好了鼠标点击特性https://blog.csdn.net/qq_33699981/article/details/72716951]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[6.Jenkens CI iOS Project]]></title>
    <url>%2F2018%2F12%2F07%2F6.Jenkens%20CI%20iOS%20Project%2F</url>
    <content type="text"><![CDATA[使用jenkins来持续集成iOP projectAppStoreloginkeychains配置1$&#123;KEYCHAIN_PATH&#125; $&#123;KEYCHAIN_PASSWORD&#125; $&#123;CODE_SIGNING_IDENTITY&#125;loginkeychains.png编译准备123456789cd YUNDADAsh ../scripts/AsignBuildNumber.sh line $&#123;BUILD_NUM&#125;pod install --verboseif [ -f &quot;$&#123;WORKSPACE&#125;/scripts/copyFiles.sh&quot; ];then sh $&#123;WORKSPACE&#125;/scripts/copyFiles.shelse echo &quot;文件不存在&quot;fixcode配置xcode_1xcode_2xcode_3xcode_44.上传到appstore123python upload.py SHIPPER REL 1.1.0 1 ./build/YUNDADA-Shipper.ipapython upload.py EXPRESS REL 1.1.0 1 ./build/YUNDADA-Line.ipa上传appStore1234IPA_PATH=&quot;$&#123;WORKSPACE&#125;/build/YUNDADA-Line.ipa&quot;altoolPath=&quot;/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool&quot;&quot;$&#123;altoolPath&#125;&quot; --validate-app -f &quot;$&#123;IPA_PATH&#125;&quot; -u transda56@aliyun.com -p ofnc-vnyh-gdig-izka -t ios --output-format xml&quot;$&#123;altoolPath&#125;&quot; --upload-app -f &quot;$&#123;IPA_PATH&#125;&quot; -u transda56@aliyun.com -p ofnc-vnyh-gdig-izka -t ios --output-format xml5.通知到钉钉dingding.png]]></content>
      <categories>
        <category>Jenkens</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Jenkens</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[5.travis CI自动部署Hexo]]></title>
    <url>%2F2018%2F12%2F07%2F5.travis-CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo%2F</url>
    <content type="text"><![CDATA[本文基于travis CI自动部署Hexo到github page简介前面已经介绍了如何使用Hexo配合github page搭建自己的blog。你会发现每次需要发布一篇新的文章至少需要两步：提交代码到hexo源码库发布到github.io仓库虽然已经很简单了，但是还有没有办法减少工作量?答案是：有！就是今天要讲的。解决的问题是：完成第一步：提交代码到hexo源码库，利用持续集成构建工具自动发布。持续集成：continue Integration.有工具：jenkins， travis CI等travis CItravis CI的优缺点就不用讲了，主要是github和它配合起来，很容易。参考下面2位先驱的文章基本可以搞定，但年代有点久了，travis CI也已经更新了，我就罗列下我遇到的问题。基于Travis CI实现 Hexo 在 Github 和 Coding 的同步部署手把手教你使用Travis CI自动部署你的Hexo博客到Github上1.登录travis-ci使用github账号登录https://www.travis-ci.org/我发现还有这个网站https://travis-ci.com/有兴趣的可以试试2.选择你的项目设置前往https://github.com/settings/tokens/new生成一个Personal access token请记住这个token，退出这个页面就没了，下个页面要用token_name随便起一个，value用刚刚生成的token，然后点击add按钮.这个token_name会在.travis.yml脚本中用到2.设置脚本.travis.yml在你的源代码分支下面添加.travis.yml1234567891011121314151617181920212223242526272829303132333435language: node_jsnode_js: stable# S: Build Lifecycleinstall: - npm install#before_script: # - npm install -g gulpbefore_script: - git submodule add https://github.com/ZiFy/hexo-theme-next.git themes/next - git submodule update --init --recursivescript: - hexo g # - hexo d# hexo d 使用这个脚本回报错误，主要是提交代码用户权限问题。所以有了下面after_scriptafter_script: - cd ./public - git init - git config user.name &quot;zify&quot; - git config user.email &quot;zhaol2014@foxmail.com&quot; - git add . - git commit -m &quot;Update docs&quot; - git push --force --quiet &quot;https://$&#123;access_token&#125;@$&#123;GH_REF&#125;&quot; master:master# E: Build LifeCyclebranches: only: - developenv: global: - GH_REF: github.com/ZiFy/ZiFy.github.io.gitaccess_token: 在网站配置页面添加的环境变量GH_REF: hexo源代码仓库develop: 是要执行命令的分支提交.travis.yml每一次提交，都会出发travis的任务检查，检查通过，则会执行任务。travis原理监听commint提交检查是否包含.travis.yml检查.travis.yml的语法执行任务执行任务。最后时间：2018-12-7Hexo：3.8]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>travis CI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[4.程序员装逼指南之Blog]]></title>
    <url>%2F2018%2F12%2F05%2F4.%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A3%85%E9%80%BC%E6%8C%87%E5%8D%97%E4%B9%8BBlog%2F</url>
    <content type="text"><![CDATA[GitHub PagesGitHub Pageshexo教程以下几点特别说明一下使用hexo deploy发布123456# _config.ymldeploy: type: git repo: https://github.com/ZiFy/ZiFy.github.io.git branch: master message: &quot;hexo自动发布&quot;特别提醒：这个命令会把你的文件都删了，只保留发布的文件。所以，请一定要选择另一个分支开发，这样才能把markdown文件保留下来。1234一键发布测试$ hexo g&amp;&amp;hexo s一键发布命令$ hexo g&amp;&amp;hexo d使用CI自动发布markdown支持本地图片使用hexo-asset-imageNextnext 是一款了不起的hexo主题，支持很多功能。最重要是风格适合程序员。 [你是我的眼，眼里只有黑白色]hexo-theme-next可以添加的功能Next第三方服务集成评论 Gitalkgithub OAuth AppsAnnie主题使用Gitalk123456789# /theme/next/_config.ymlgitalk: enable: true github_id: Zify # Github repo owner repo: blog_comment_repo # Repository name to store issues. client_id: c30a8xxxx # Github Application Client ID client_secret: 916ce8fxx # Github Application Client Secret admin_user: Zify # GitHub repo owner and collaborators, only these guys can initialize github issues distraction_free_mode: true # Facebook-like distraction free mode未找到相关的 Issues 进行评论使用自己的账号登录一下，打开页面就会自动初始化。Baidu analyticshttps://tongji.baidu.com/google analyticshttps://analytics.google.com/使用busuanzi统计阅读次数12345678busuanzi_count: enable: true total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eyeRSS1$ npm install --save hexo-generator-feednext配置RSS标签页面，分类页面hexo 创建文章、标签、分类页面-阅读排行hexo page 阅读排行next自定义样式hexo-theme-next主题设置Hexo-NexT配置超炫网页效果hexo-admin发布平台（不重要，hexo3.8, hexo-admin2.3.0下存在bug）hexo-admin那个人的hexo-admin教程123npm install --save hexo-adminhexo server -dopen http://localhost:4000/admin/SEO优化Hexo博客Next主题SEO优化方法Hexo博客压缩优化Hexo博客生成的静态文件存在大量空白，不仅难看，而且在一定程度上影响用户网页加载，需要对js和css进行压缩。安装插件1$ npm install hexo-neat --save配置在站点配置增加如下属性，可以选择是否压缩HTML、CSS、Js文件，均有相应的开关选项。1234567891011121314151617181920# hexo-neatneat_enable: trueneat_html: enable: true exclude:neat_css: enable: true exclude: - &apos;*.min.css&apos;neat_js: enable: true mangle: true output: compress: exclude: - &apos;*.min.js&apos;]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[3.我的Hexo使用教程]]></title>
    <url>%2F2018%2F12%2F04%2F3.%E6%88%91%E7%9A%84Hexo%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[使用Hexo搭建博客Quick StartCreate a new post1$ hexo new "My New Post"More info: WritingRun server123$ hexo server简写$ hexo sMore info: ServerGenerate static files123$ hexo generate简写$ hexo g或者More info: GeneratingDeploy to remote sites123$ hexo deploy简写$ hexo dclean小心使用清理命令，会把post目录下面的文件都清理掉1hexo cleanMore info: Deployment快捷命令：测试：1hexo g &amp;&amp; hexo s发布：1hexo g &amp;&amp; hexo d安装主题资源网站 https://hexo.io/themes/下载主题下载主题到themes 目录下。有2种主流方式。git clone可以直接 clone 到 themes 目录下，优点是如果对主题有调整需求可以同时提交到 git 控制中。1$ git clone https://github.com/olOwOlo/hugo-theme-even themes/evengit submodule也可以添加到 git 的 submodule 中，优点是后面讲到用 travis 自动部署时比较方便。如果需要对主题做更改，最好 fork 主题再做改动。123$ git submodule add https://github.com/olOwOlo/hugo-theme-even.git themes/evengit submodule add https://github.com/ZiFy/hexo-theme-next.git themes/next配置安装到根目录下找到配置文件_config.yml -&gt; theme: landscapetheme: 主题keylandscape: 对应themes目录下的文件夹名使用travis CI自动部署THANKShexo从零开始到搭建完整5分钟 搭建免费个人博客]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2.sonarQube 分析Objective-C]]></title>
    <url>%2F2018%2F12%2F03%2F2.sonarQube%20%E5%88%86%E6%9E%90Objective-C%2F</url>
    <content type="text"><![CDATA[使用sonarQube分析Objective-CsonarQube 分析Objective-C安装安装homebrew1ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;安装mysql1brew install mysqlmysql 配置教程:https://www.jianshu.com/p/4cb5ef29a099安装Java安装java ：http://www.oracle.com/technetwork/java/javase/downloads/index.html安装sonarQube1brew install sonarqube也可以自己到官网下载http://www.sonarqube.org/downloads/解压后移到/usr/local我的目录1/usr/local/sonarqube-6.7.5安装xcpretty1gem install xcpretty安装OCLint12brew tap oclint/formulaebrew install oclint安装sonar-scanner1brew install sonar-scanner安装gcovr1brew install gcovr安装sonar-objective-c-plugin配置sonarqube的配置文件conf/sonar.properties配置sonar连接mysql// 注： 我配置mysql重启服务，链接不上。12345678910111213// 配置sonar连接mysqlsonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance&amp;useSSL=falsesonar.jdbc.username=rootsonar.jdbc.password=root// 其他sonar.sorceEncoding=UTF-8sonar.login=adminsonar.password=admin运行支持的命令有： start/restart/stop/statussudo /usr/local/sonar/bin/macosx-universal-64/sonar.sh start其他安装sonarQube汉化包https://github.com/SonarQubeCommunity/sonar-l10n-zh/releases/latest找到jar包，添加到extensions/plugins我用的sonarQube6.5对应汉化包1.17添加完成后，需要重启服务才能生效。12345sonar restartsh bin/macosx-universal-64/sonar.sh startsh bin/macosx-universal-64/sonar.sh statussh bin/macosx-universal-64/sonar.sh restart]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>sonarQube</tag>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1.use rn by Cocoapods]]></title>
    <url>%2F2018%2F12%2F02%2F1.use%20rn%20by%20Cocoapods%2F</url>
    <content type="text"><![CDATA[use rn by Cocoapods配置信息rn版本0.50.0cocoapods:1.4Podfile1234567891011121314151617181920212223242526272829303132333435363738394041platform :ios, &apos;8.0&apos;$rn_node_moudles_dir = &apos;../RN/node_modules&apos;$rn_react_pod_dir = $rn_node_moudles_dir+&apos;/react-native&apos;def ymm_rn_debug_pod # Your &apos;node_modules&apos; directory is probably in the root of your project, # but if not, adjust the `:path` accordingly pod &apos;React&apos;, :path =&gt; $rn_react_pod_dir, :subspecs =&gt; [ &apos;BatchedBridge&apos;, #if RN &gt;= 0.43 #CxxBridge 代替 BatchedBridge #&apos;CxxBridge&apos;, &apos;Core&apos;, &apos;DevSupport&apos;, # Include this to enable In-App Devmenu if RN &gt;= 0.43 &apos;RCTNetwork&apos;, &apos;RCTWebSocket&apos;, # needed for debugging &apos;RCTActionSheet&apos;, &apos;RCTAnimation&apos;, &apos;RCTImage&apos;, &apos;RCTText&apos;,# &apos;RCTActionSheet&apos;,# &apos;RCTBlob&apos;,# &apos;RCTSettings&apos;,# &apos;RCTVibration&apos;,# &apos;RCTLinkingIOS&apos;,# &apos;RCTAnimation&apos;,# &apos;RCTGeolocation&apos;, # Add any other subspecs you want to use in your project ] # Explicitly include Yoga if you are using RN &gt;= 0.42.0 pod &apos;yoga&apos;, :path =&gt; $rn_react_pod_dir+&apos;/ReactCommon/yoga&apos; # Third party deps podspec link pod &apos;DoubleConversion&apos;, :podspec =&gt; $rn_react_pod_dir+&apos;/third-party-podspecs/DoubleConversion.podspec&apos; pod &apos;GLog&apos;, :podspec =&gt; $rn_react_pod_dir+&apos;/third-party-podspecs/GLog.podspec&apos; pod &apos;Folly&apos;, :podspec =&gt; $rn_react_pod_dir+&apos;/third-party-podspecs/Folly.podspec&apos;end用CxxBridge替换BatchedBridge将podfile修改后，会出现问题https://github.com/facebook/react-native/issues/16381https://github.com/facebook/react-native/pull/16664123456789101112131415161718 s.subspec &quot;jschelpers&quot; do |ss| ss.dependency &quot;Folly&quot;, &quot;2016.09.26.00&quot;+ ss.dependency &quot;React/PrivateDatabase&quot; ss.compiler_flags = folly_compiler_flags ss.source_files = &quot;ReactCommon/jschelpers/*.&#123;cpp,h&#125;&quot; ss.private_header_files = &quot;ReactCommon/jschelpers/*.h&quot; ss.pod_target_xcconfig = &#123; &quot;HEADER_SEARCH_PATHS&quot; =&gt; &quot;\&quot;$(PODS_TARGET_SRCROOT)/ReactCommon\&quot;&quot; &#125; ss.framework = &quot;JavaScriptCore&quot; end + s.subspec &quot;PrivateDatabase&quot; do |ss|+ ss.source_files = &quot;ReactCommon/privatedata/*.&#123;cpp,h&#125;&quot;+ ss.private_header_files = &quot;ReactCommon/privatedata/*.h&quot;+ end+ s.subspec &quot;cxxreact&quot; do |ss| ss.dependency &quot;React/jschelpers&quot; ss.dependency &quot;boost&quot;]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Cocoapods</tag>
        <tag>ReactNative</tag>
      </tags>
  </entry>
</search>
